name: Build Android APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1 ▸ Repository auschecken
    - uses: actions/checkout@v4

    # 2 ▸ Buildozer-Cache (spart ~5-10 min)
    - name: Cache .buildozer
      uses: actions/cache@v4
      with:
        path: |
          ~/.buildozer
          ./.buildozer
        key: ${{ runner.os }}-buildozer-${{ hashFiles('buildozer.spec') }}-v5
        restore-keys: |
          ${{ runner.os }}-buildozer-

    # 3 ▸ Python 3.11 (p4a < 2024.10 braucht 3.11)
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    # 4 ▸ Java, Android SDK/NDK & System-Libs installieren
    - name: Install Android SDK/NDK & system dependencies
      run: |
        sudo apt-get update -y
        sudo apt-get install -y \
          openjdk-17-jdk python3-pip unzip wget ccache \
          autoconf automake libtool libtool-bin libltdl-dev pkg-config

        export ANDROID_SDK_ROOT="$HOME/android-sdk"
        mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
        cd "$ANDROID_SDK_ROOT"
        wget -q https://dl.google.com/android/repository/commandlinetools-linux-11076708_latest.zip -O cmdline.zip
        unzip -qq cmdline.zip -d cmdline-tools/tmp
        mv cmdline-tools/tmp/cmdline-tools cmdline-tools/latest
        rm cmdline.zip && rmdir cmdline-tools/tmp

        echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> "$GITHUB_PATH"
        echo "$ANDROID_SDK_ROOT/platform-tools"       >> "$GITHUB_PATH"
        export PATH="$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools:$PATH"

        yes | sdkmanager "platform-tools" \
                         "platforms;android-34" \
                         "build-tools;34.0.0" \
                         "ndk;26.1.10909125"
        yes | sdkmanager --licenses

        echo "ANDROID_NDK_HOME=$ANDROID_SDK_ROOT/ndk/26.1.10909125" >> "$GITHUB_ENV"
        echo "ANDROID_NDK=$ANDROID_SDK_ROOT/ndk/26.1.10909125"      >> "$GITHUB_ENV"

    # 5 ▸ Buildozer & Cython installieren
    - name: Install Buildozer & Cython
      run: |
        pip install --upgrade buildozer cython==0.29.36

    # 6 ▸ Clean p4a builds only (keep python-for-android sources)
    - name: Clean p4a build dirs
      run: |
        buildozer android clean
        rm -rf ./.buildozer/android/platform/*/build

    # 7 ▸ APK bauen – komplettes Log speichern
    - name: Build debug APK
      id: build_apk
      run: |
        set -o pipefail
        buildozer -v android debug 2>&1 | tee buildozer_full.log

    # 8 ▸ Log immer hochladen
    - name: Upload buildozer log
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: buildozer-log
        path: buildozer_full.log

    # 9 ▸ APK nur hochladen, wenn Build erfolgreich
    - name: Upload APK
      if: steps.build_apk.outcome == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: BarkAlarm-APK
        path: bin/*.apk
